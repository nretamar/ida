package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import dao.OrdenDeCompraDAO;
import dao.ProductoDAO;
import dto.OrdenDeCompraDTO;
import dto.OrdenRecepcionItemDTO;
import exceptions.ProductoException;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Almacén
//  @ File Name : Producto.java
//  @ Date : @Sept2018
//  @ Author : @Grupo 1
//		Boujon Di Maio, Antonella.
//		Gomila, Tomas Guido.		
//		Graue, Florencia.
//		Retamar, Nicolas.
//
//




public class OrdenDeCompra {
	private Integer idOrdenDeCompra;
	private Producto producto;
	private Date fechaEmitida;
	private boolean ordenActiva;
	private int cantidadOrdenada;
	private List<OrdenRecepcionItem> recepcionesDelProducto;
	
	public OrdenDeCompra() {
		recepcionesDelProducto = new ArrayList<OrdenRecepcionItem>();
	}
	
	public OrdenDeCompra(OrdenDeCompraDTO dto) {
		this.idOrdenDeCompra = dto.getIdOrdenDeCompra();
		
		Producto model;
		try {
			model = ProductoDAO.getInstancia().buscar(dto.getProducto().getIdProducto());
			this.producto = model;
		} catch (ProductoException e) {
			e.printStackTrace();
		}
		
		this.fechaEmitida = dto.getFechaEmitida();
		this.ordenActiva = dto.getOrdenActiva();
		this.cantidadOrdenada = dto.getCantidadOrdenada();
		
		
		recepcionesDelProducto = new ArrayList<OrdenRecepcionItem>();
		for(OrdenRecepcionItemDTO item: dto.getRecepcionesDelProducto()) {
			this.agregarItem(new OrdenRecepcionItem(item));
		}
		
	}
	
	/*
	 * No persiste
	 */
	public void agregarItem(OrdenRecepcionItem item) {
		this.recepcionesDelProducto.add(item);
	}

	public OrdenDeCompraDTO toDTO() {
		OrdenDeCompraDTO dto = new OrdenDeCompraDTO();
		dto.setIdOrdenDeCompra(idOrdenDeCompra);
		dto.setProducto(producto.toDTO());
		dto.setFechaEmitida(fechaEmitida);
		dto.setOrdenActiva(ordenActiva);
		dto.setCantidadOrdenada(cantidadOrdenada);
		
		for(OrdenRecepcionItem item : this.recepcionesDelProducto) {
			dto.getRecepcionesDelProducto().add(item.toDTO());
		}
		
		return dto;
	}
	
	public OrdenDeCompra save() {
		return OrdenDeCompraDAO.getInstancia().save(this);
	}
	
	
	
	public Integer getIdOrdenDeCompra() {
		return idOrdenDeCompra;
	}

	public void setIdOrdenDeCompra(Integer idOrdenDeCompra) {
		this.idOrdenDeCompra = idOrdenDeCompra;
	}

	public Producto getProducto() {
		return producto;
	}

	public void setProducto(Producto producto) {
		this.producto = producto;
	}

	public Date getFechaEmitida() {
		return fechaEmitida;
	}

	public void setFechaEmitida(Date fechaEmitida) {
		this.fechaEmitida = fechaEmitida;
	}

	public boolean getOrdenActiva() {
		return ordenActiva;
	}

	public void setOrdenActiva(boolean ordenActiva) {
		this.ordenActiva = ordenActiva;
	}

	public int getCantidadOrdenada() {
		return cantidadOrdenada;
	}

	public void setCantidadOrdenada(int cantidadOrdenada) {
		this.cantidadOrdenada = cantidadOrdenada;
	}

	public List<OrdenRecepcionItem> getRecepcionesDelProducto() {
		return recepcionesDelProducto;
	}

	public void setRecepcionesDelProducto(List<OrdenRecepcionItem> recepcionesDelProducto) {
		this.recepcionesDelProducto = recepcionesDelProducto;
	}
	
	/*
	 * Verifica y persiste si el estadoActivo cambia su valor.
	 */
	public boolean estoyActivo() {
		int cantidadRestante = this.getCantidadRestanteEntrega();
				
		//Cambio o mantengo bien el boolean, por las dudas.
		if(cantidadRestante > 0)
		{			
			if(this.ordenActiva == false)
			{
				this.ordenActiva = true;
				save();
			}
			
			return true;
		}
		else
		{
			//CantRestante == 0, o si es menor a 0, aunque no debería pasar.
			if(this.ordenActiva == true)
			{
				this.ordenActiva = false;
				save();
			}
			
			return false;
		}
	}
	
	public int getCantidadRestanteEntrega() {
		int cantidadRestante = this.cantidadOrdenada;
		//Recorro mis recepciones.
		for(OrdenRecepcionItem item : this.recepcionesDelProducto) {
			cantidadRestante = cantidadRestante - item.getCantidad();
		}
		return cantidadRestante;
	}
	
	public boolean tengoProducto(String codigoBarras) {
		if(this.producto.getCodigoBarras().equals(codigoBarras))
			return true;
		else
			return false;
	}
	
	/*
	 * @return sobrantes. 
	 */
	public int recepcionarCompra(int cantidad) {
		if(estoyActivo())
		{
			int sobrante = 0;
			OrdenRecepcionItem item = new OrdenRecepcionItem();
			item.setFecha(new Date());
			item.setIdOrdenRecepcionItem(null);
			
			//Averiguo cuanto me falta
			int cantidadRestante = this.getCantidadRestanteEntrega();
			
			if(cantidadRestante >= cantidad)
			{
				item.setCantidad(cantidad);
			}
			else
			{//recibo mas de lo que quiero
				sobrante = cantidad - cantidadRestante;
				item.setCantidad(cantidadRestante);
			}
			this.recepcionesDelProducto.add(item);
			save();
			return sobrante;
		}
		else
		{
			return cantidad;
		}
	}
	
	public void verificarSiRecibiTodo() {
		estoyActivo();	//Mismo método.
	}
	
	public int getTotalRecibido() {
		int cantidadRecibida = 0;
		//Recorro mis recepciones.
		for(OrdenRecepcionItem item : this.recepcionesDelProducto) {
			cantidadRecibida = cantidadRecibida + item.getCantidad();
		}
		return cantidadRecibida;
	}
}
