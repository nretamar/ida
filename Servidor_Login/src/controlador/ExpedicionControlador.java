package controlador;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import dao.PedidoDAO;
import dto.PedidoDTO;
import exceptions.PedidoException;
import model.EstadoPedido;
import model.Pedido;
import model.PedidoItem;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Almacén
//  @ File Name : Producto.java
//  @ Date : @Sept2018
//  @ Author : @Grupo 1
//		Boujon Di Maio, Antonella.
//		Gomila, Tomas Guido.		
//		Graue, Florencia.
//		Retamar, Nicolas.
//
//




public class ExpedicionControlador {
	
	public static ExpedicionControlador instancia;
	
	private ExpedicionControlador() {		
	}
	
	public static ExpedicionControlador getInstancia() {
		if (instancia == null) {
			instancia = new ExpedicionControlador();
		}
		return instancia;
	}	
	
	public List<PedidoDTO> findAllPedidos() {
		List<PedidoDTO> pedidos = new ArrayList<PedidoDTO>();
		
		try {
			for (Pedido pedi : PedidoDAO.getInstancia().getAll()) {
				pedidos.add(pedi.toDTO());
			}
		} catch (PedidoException e) {
			e.printStackTrace();
		}
	
		return pedidos;
	}
	
	public Integer altaPedido(PedidoDTO pedido) {
		//Creo pedido con falta de stock
		pedido.setEstadoPedido("FALTA_STOCK");
		pedido.setFecha(new Date());
		pedido.setIdPedido(null);
		Pedido model = new Pedido(pedido).save();
		//Una vez creado el pedido, automaticamente le asigno sus productos
		//y pasa a pendiente si hay stock
		PedidoDTO ret = pendienteSiTengoStock(model.getIdPedido());
		
		return ret.getIdPedido();
	}
	
	public void actualizarTodoFaltaDeStockAPendiente() {
		for(PedidoDTO item : findAllPedidos())
			pendienteSiTengoStock(item.getIdPedido());
		
	}
	
	/*
	 * Solo con falta stock se actualiza a pendiente
	 */
	public PedidoDTO pendienteSiTengoStock(Integer idPedido) {
		if(tengoStock(idPedido))
		{
			//Modifico mi pedido
			try {
				//Me aseguro que ese pedido sea Falta Stock
				Pedido p = PedidoDAO.getInstancia().buscar(idPedido);
				if(EstadoPedido.FALTA_STOCK.equals(p.getEstadoPedido()))
				{
					//Debo descontar el stock en productos
					for(PedidoItem item : p.getItems())
					{
						//Una linea hecha una sola, descuenta stock en ese producto antes
						//de pasar a estado pendiente.
							//VISUALIZACION DEBUG
							//ProductoDTO dto = ProductoControlador.getInstancia().buscarProductoById(item.getProducto().getIdProducto());
							//System.out.println("1ERA FASE:");
							//System.out.println("Producto: " + dto.getDescripcion() + "  stockActual: " + dto.getStockActual());
						ProductoControlador.getInstancia()
						.descontarStockProducto(item.getProducto().getIdProducto()
								, item.getCantidad());
						
							//dto = ProductoControlador.getInstancia().buscarProductoById(item.getProducto().getIdProducto());
							//System.out.println("2DA FASE:");
							//System.out.println("Producto: " + dto.getDescripcion() + "  stockActual: " + dto.getStockActual());
							//System.out.println("");
					}
					
					//Cambio de estado a pendiente
					//Debo pedir devuelta "p", porque sino me vuelve a grabar cantidades viejas. 
					p = PedidoDAO.getInstancia().buscar(idPedido);
					p.pendiente();
				}
				//Devuelvo el pedido actualizado.
				return buscarPedido(idPedido);
				
				
			} catch (PedidoException e) {
				e.printStackTrace();
			}
			
		}
		return buscarPedido(idPedido);
		
	}
	
	public boolean tengoStock(Integer idPedido) {
		try {
			boolean tengoStock = true;
			Pedido p = PedidoDAO.getInstancia().buscar(idPedido);
			
			for(PedidoItem item : p.getItems())
			{
				//Si no tengo stock, le clavo el false
				if(!ProductoControlador.getInstancia()
						.tengoStock(item.getProducto().getIdProducto(), item.getCantidad()))
					tengoStock = false;
			}
			return tengoStock;
			
		} catch (PedidoException e) {
			e.printStackTrace();
		}
		return false;
		
	}
	
	/*
	 * Solo se puede dar de baja si el pedido esta:
	 * FALTA_STOCK
	 * PENDIENTE_EN_PERSONA
	 * PENDIENTE_EN_LOGISTICA
	 * 
	 * NO se dara de baja a aquellos pedidos que fueron:
	 * DESPACHADO_EN_LOGISTICA
	 * DESPACHADO_EN_PERSONA
	 */
	public boolean bajaPedido(Integer idPedido) {
		boolean cancelado;
		Pedido pedido;
		try {
			pedido = PedidoDAO.getInstancia().buscar(idPedido);
			cancelado = pedido.cancelarPedido();
			
			if(cancelado) {
				//Devuelvo productos del pedido al almacen
				List<PedidoItem> items = pedido.getItems();
				for(PedidoItem item: items) {
					ProductoControlador.getInstancia().sumarStockProducto(item.getProducto().getIdProducto(), item.getCantidad());
				}
				//Devuelto todos los productos al almacen, doy como exitosa la operación.
				return true;
			}
			else
				//El pedido fue despachado, por lo tanto no cancelo el pedido ni devuelvo nada al almacén.
				return false;
			
		} catch (PedidoException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public void modificarPedido(PedidoDTO pedido) {
		if(pedido.getIdPedido() != null)
			new Pedido(pedido).save();
	}
	
	public PedidoDTO buscarPedido(Integer idPedido) {
		
		for (PedidoDTO pedido : findAllPedidos()) {
			if(pedido.getIdPedido().equals(idPedido))
				return pedido;
		}
		return null;
	}
	
	public List<PedidoDTO> buscarPedidosPendientesDespacho() {
		List<PedidoDTO> todos = findAllPedidos();
		List<PedidoDTO> pendientes = new ArrayList<PedidoDTO>();
		
		for(PedidoDTO item : todos)
		{
			if(item.getEstadoPedido().equals("PENDIENTE_EN_PERSONA")
					|| item.getEstadoPedido().equals("PENDIENTE_EN_LOGISTICA"))
			{
				pendientes.add(item);
			}
		}
		return pendientes;
	}
	
	public void cancelar(Integer idPedido) {
		Pedido p;
		try {
			p = PedidoDAO.getInstancia().buscar(idPedido);
			
			if (!EstadoPedido.FALTA_STOCK.equals(p.getEstadoPedido()) 
					&& !EstadoPedido.CANCELADO.equals(p.getEstadoPedido()))
			{
				//Devuelvo productos
				for(PedidoItem item : p.getItems())
				{
					//Devuelvo cantidad a ese producto especifico.
					ProductoControlador.getInstancia()
					.sumarStockProducto(item.getProducto().getIdProducto(), item
							.getCantidad());
				}
			}
			p.cancelar();
			
		} catch (PedidoException e) {
			e.printStackTrace();
		}		
	}
	
	public void despachar(Integer idPedido) {
		try {
			PedidoDAO.getInstancia().buscar(idPedido).despachar();
		} catch (PedidoException e) {
			e.printStackTrace();
		}
	}
	
	public PedidoDTO buscarPedidoByDireccionEnvioCoordinado(String direccion) {
		for (PedidoDTO pedido : findAllPedidos()) {
			if(pedido.getDireccion().getCalle().equals(direccion));
				return pedido;
		}
		return null;
	}
	
	/*
	 * @return cantidad faltante del producto.
	 */
	public int buscarFaltaStockByProducto(String codigoBarras)
	{
		List<Pedido> pedidos;
		try
		{
			pedidos = PedidoDAO.getInstancia().getAll();
			int cantidadFaltante = 0;
			for(Pedido pedido: pedidos)
			{
				if(EstadoPedido.FALTA_STOCK.equals(pedido.getEstadoPedido()) )
				{
					//Me fijo si tengo el/los producto en items
					for(PedidoItem item : pedido.getItems())
					{
						if(item.getProducto().getCodigoBarras().equals(codigoBarras))
						{
							cantidadFaltante = cantidadFaltante + item.getCantidad();
						}
					}
				}
			}
			return cantidadFaltante;
			
			
		} catch (PedidoException e) {
			e.printStackTrace();
		}
		//Ante la duda, 0 en vez de -1
		return 0;
	}
}
