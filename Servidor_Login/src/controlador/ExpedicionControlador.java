package controlador;

import java.util.ArrayList;
import java.util.List;

import dao.PedidoDAO;
import dto.PedidoDTO;
import exceptions.PedidoException;
import model.Pedido;
import model.PedidoItem;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Almacén
//  @ File Name : Producto.java
//  @ Date : @Sept2018
//  @ Author : @Grupo 1
//		Boujon Di Maio, Antonella.
//		Gomila, Tomas Guido.		
//		Graue, Florencia.
//		Retamar, Nicolas.
//
//




public class ExpedicionControlador {
	public static ExpedicionControlador instancia;
	
	private ExpedicionControlador() {		
	}
	
	public ExpedicionControlador getInstancia() {
		if (instancia == null) {
			instancia = new ExpedicionControlador();
		}
		return instancia;
	}	
	
	public List<PedidoDTO> findAllPedidos() {
		List<PedidoDTO> pedidos = new ArrayList<PedidoDTO>();
		
		try {
			for (Pedido pedi : PedidoDAO.getInstancia().getAll()) {
				pedidos.add(pedi.toDTO());
			}
		} catch (PedidoException e) {
			e.printStackTrace();
		}
	
		return pedidos;
	}
	
	//La idea era un list de 2 variables, será con alta pedido y fue
	/*public boolean realizarVenta(List<String codigoBarras, int cantidad>, String direccionEnvioCoordinado) {
	
	}*/
	
	public int altaPedido(PedidoDTO pedido) {
		return new Pedido(pedido).save().toDTO().getIdPedido();
	}
	
	/*
	 * Solo se puede dar de baja si el pedido esta:
	 * FALTA_STOCK
	 * PENDIENTE_EN_PERSONA
	 * PENDIENTE_EN_LOGISTICA
	 * 
	 * NO se dara de baja a aquellos pedidos que fueron:
	 * DESPACHADO_EN_LOGISTICA
	 * DESPACHADO_EN_PERSONA
	 */
	public boolean bajaPedido(Integer idPedido) {
		boolean cancelado;
		Pedido pedido;
		try {
			pedido = PedidoDAO.getInstancia().buscar(idPedido);
			cancelado = pedido.cancelarPedido();
			
			if(cancelado) {
				//Devuelvo productos del pedido al almacen
				List<PedidoItem> items = pedido.getItems();
				for(PedidoItem item: items) {
					ProductoControlador.getInstancia().sumarStockProducto(item.getProducto().getIdProducto(), item.getCantidad());
				}
				//Devuelto todos los productos al almacen, doy como exitosa la operación.
				return true;
			}
			else
				//El pedido fue despachado, por lo tanto no cancelo el pedido ni devuelvo nada al almacén.
				return false;
			
		} catch (PedidoException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public void modificarPedido(PedidoDTO pedido) {
		if(pedido.getIdPedido() != null)
			new Pedido(pedido).save();
	}
	
	public PedidoDTO buscarPedido(Integer idPedido) {
		
		for (PedidoDTO pedido : findAllPedidos()) {
			if(pedido.getIdPedido().equals(idPedido))
				return pedido;
		}
		return null;
	}
	
	public void despacharEnPersona(Integer idPedido) {
		try {
			PedidoDAO.getInstancia().buscar(idPedido).despacharEnPersona();
		} catch (PedidoException e) {
			e.printStackTrace();
		}
	}
	
	public void despacharEnLogistica(Integer idPedido) {
		try {
			PedidoDAO.getInstancia().buscar(idPedido).despacharEnLogistica();
		} catch (PedidoException e) {
			e.printStackTrace();
		}
	}
	
	public PedidoDTO buscarPedidoByDireccionEnvioCoordinado(String direccion) {
		for (PedidoDTO pedido : findAllPedidos()) {
			if(pedido.getDireccionEnvioCoordinado().equals(direccion));
				return pedido;
		}
		return null;
	}
}
