package controlador;

import java.util.ArrayList;
import java.util.List;

import dao.ProductoDAO;
import dto.ProductoDTO;
import exceptions.ProductoException;
import model.Producto;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Almacén
//  @ File Name : Producto.java
//  @ Date : @Sept2018
//  @ Author : @Grupo 1
//		Boujon Di Maio, Antonella.
//		Gomila, Tomas Guido.		
//		Graue, Florencia.
//		Retamar, Nicolas.
//
//




public class ProductoControlador {
	
	public static ProductoControlador instancia;
	
	private ProductoControlador() {	
	}
	
	public static ProductoControlador getInstancia() {
		if (instancia == null) {
			instancia = new ProductoControlador();
		}
		return instancia;
	}
	
	
	public List<ProductoDTO> findAllProductos() {
		List<ProductoDTO> productos = new ArrayList<ProductoDTO>();
		
		try {
			for (Producto producto : ProductoDAO.getInstancia().getAll()) {
				productos.add(producto.toDTO());
			}
		} catch (ProductoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return productos;
	}
	
	public Integer altaProducto(ProductoDTO producto) {
		return new Producto(producto).save().toDTO().getIdProducto();
	}
	
	public void bajaProducto(Integer idProducto) {
		try {
			ProductoDAO.getInstancia().buscar(idProducto).darDeBaja();
		} catch (ProductoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void modificarProducto(ProductoDTO producto) {
		new Producto(producto).save();
	}
	
	public ProductoDTO buscarProductoById(Integer idProducto) {
		try {
			return ProductoDAO.getInstancia().buscar(idProducto).toDTO();
		} catch (ProductoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	public ProductoDTO buscarProductoByCodigoBarras(String codigoBarras) {
		
		for (ProductoDTO producto : findAllProductos()) {
			if(producto.getCodigoBarras().equals(codigoBarras))
				return producto;
		}
		return null;
		
	}
	//PENDIENTE PARA HACER
	private void verificarMinimoStockAndCrearOrdenes() {
		
	}
	
	/*
	 * Significa que el cliente no le gustó el producto, y lo devolvió a la tienda
	 */
	public void sumarStockProducto(Integer idProducto, int cantidad) {
		ProductoDTO producto = buscarProductoById(idProducto);
		if(producto != null) {
			int stockActual = producto.getStockActual() + cantidad;
			if(stockActual < 0)
				stockActual = 0;
			producto.setStockActual(stockActual);
			modificarProducto(producto);
			
		}
	}
	
	public void descontarStockProducto(Integer idProducto, Integer cantidad) {
		ProductoDTO producto = buscarProductoById(idProducto);
		if(producto != null) {
			int stockActual = producto.getStockActual() - cantidad;
			if(stockActual < 0)
				stockActual = 0;
			producto.setStockActual(stockActual);
			modificarProducto(producto);
			
		}
	}
	
}
