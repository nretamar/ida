package controlador;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import dao.ProductoDAO;
import dto.OrdenDeCompraDTO;
import dto.ProductoDTO;
import exceptions.ProductoException;
import model.Producto;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @Almacén
//  @ File Name : Producto.java
//  @ Date : @Sept2018
//  @ Author : @Grupo 1
//		Boujon Di Maio, Antonella.
//		Gomila, Tomas Guido.		
//		Graue, Florencia.
//		Retamar, Nicolas.
//
//




public class ProductoControlador {
	
	public static ProductoControlador instancia;
	
	private ProductoControlador() {	
	}
	
	public static ProductoControlador getInstancia() {
		if (instancia == null) {
			instancia = new ProductoControlador();
		}
		return instancia;
	}
	
	/*
	 * @return Solo devuelve productos activos
	 */
	public List<ProductoDTO> findAllProductos() {
		List<ProductoDTO> productos = new ArrayList<ProductoDTO>();
		
		try {
			for (Producto producto : ProductoDAO.getInstancia().getAll())
			{
				if(producto.getEstadoActivo() == true)
				{
					productos.add(producto.toDTO());
				}
			}
		} catch (ProductoException e) {
			e.printStackTrace();
		}

		return productos;
	}
	
	public List<ProductoDTO> findAllProductosActivos() {
		List<ProductoDTO> productos = new ArrayList<ProductoDTO>();
		
		try {
			for (Producto producto : ProductoDAO.getInstancia().getAll()) {
				if(producto.getEstadoActivo() == true)
					productos.add(producto.toDTO());
			}
		} catch (ProductoException e) {
			e.printStackTrace();
		}

		return productos;
	}
	
	public Integer altaProducto(ProductoDTO producto) {
		return new Producto(producto).save().toDTO().getIdProducto();
	}
	
	public void bajaProducto(Integer idProducto) {
		try {
			ProductoDAO.getInstancia().buscar(idProducto).darDeBaja();
		} catch (ProductoException e) {
			e.printStackTrace();
		}
	}
	
	public void modificarProducto(ProductoDTO producto) {
		new Producto(producto).save();
	}
	
	public ProductoDTO buscarProductoById(Integer idProducto) {
		try {
			return ProductoDAO.getInstancia().buscar(idProducto).toDTO();
		} catch (ProductoException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/*
	 * Devuelve un producto activo
	 */
	public ProductoDTO buscarProductoByCodigoBarras(String codigoBarras) {
		
		for (ProductoDTO producto : findAllProductos()) {
			if(producto.getCodigoBarras().equals(codigoBarras))
				return producto;
		}
		return null;
		
	}
	//PENDIENTE PARA HACER
	//TODO
	public void verificarMinimoStockAndCrearOrdenes() {
		try {
			List<Producto> lista = ProductoDAO.getInstancia().getAll();
			
			//Recorro todos los productos, si encuentro falta de stock, le consulto
			//a OrdenDeCompra si existe Orden sobre ese producto Activa, si no existe,
			//debera crear una nueva orden de compra.
			
			for(Producto item: lista)		//Recorro lista
			{
				//Obtengo cantidad ordenada de este producto item
				int cantidadOrdenada = ComprasControlador.getInstancia()
						.buscarOrdenesActivasByProductoCantidad(item.getCodigoBarras());
				//Cantidad pedida con falta de stock
				int cantidadPedida = ExpedicionControlador.getInstancia()
						.buscarFaltaStockByProducto(item.getCodigoBarras());
				int deboPedir = item.getCantidadAPedir
						(item.getStockActual() + cantidadOrdenada - cantidadPedida);
				
				//Realizo la orden de compra
				if(deboPedir>0)
				{
					OrdenDeCompraDTO dto = new OrdenDeCompraDTO();
					dto.setIdOrdenDeCompra(null);
					dto.setProducto(item.toDTO());
					dto.setFechaEmitida(new Date());
					dto.setOrdenActiva(true);
					dto.setCantidadOrdenada(deboPedir);					
					dto.setRemito(null);
					dto.setRecepcionesDelProducto(null);
					
					ComprasControlador.getInstancia().altaOrdenDeCompra(dto);
				}	
			}
			
			/*
			 * TEST DE BLOC DE NOTAS
			 * 
			 * min = 10					min = 10
			 * stock = 7				stock = 0
			 * ord = 5					ord = 5
			 * 						
			 * ordenado = 5				ordenado = 10
			 * pedido = 0				pedido = 14
			 * 	
			 * requerido = 10			requerido = 24
			 * 
			 * deboPedir = 7+5-0 = 0	deboPedir = 0+10-14 = 15
			 * entonces:				entonces:
			 * ordenado = 10			ordenado = 25
			 */
			
		} catch (ProductoException e) {
			e.printStackTrace();
		}
		
	}
	
	/*
	 * Aumento de stock al recibir mercaderías
	 * 			ó
	 * Significa que al cliente no le gustó el producto, y lo devolvió a la tienda
	 */
	public void sumarStockProducto(Integer idProducto, int cantidad) {
		ProductoDTO producto = buscarProductoById(idProducto);
		if(producto != null) {
			int stockActual = producto.getStockActual() + cantidad;
			if(stockActual < 0)
				stockActual = 0;
			producto.setStockActual(stockActual);
			modificarProducto(producto);
			
		}
	}
	
	/*
	 * Jamás habra stock negativo, si cantidad es menor a 0, cantidad será igual a 0.
	 */
	public void descontarStockProducto(Integer idProducto, Integer cantidad) {
		ProductoDTO producto = buscarProductoById(idProducto);
		if(producto != null) {
			int stockActual = producto.getStockActual() - cantidad;
			if(stockActual < 0)
				stockActual = 0;
			producto.setStockActual(stockActual);
			modificarProducto(producto);
			
		}
	}
	
}
